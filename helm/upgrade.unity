#/bin/bash
NS="unity"

# Use relative path of script invocation
cd "`dirname \"$0\"`"

source ./common.bash
# Verify the kubernetes installation has the feature gates needed.
sh ./verify.kubernetes

# Check if unity-certs-0 exists. If not, then create it
kubectl get secrets -n "$NS" | grep unity-certs-0 --quiet
if [ $? -ne 0 ];
    then echo "*** Couldn't find unity-certs. Creating an empty secret. Delete it and re-create it if you want to validate unisphere certificates ***"
    kubectl create -f ./emptysecret.yaml
fi

kubectl get customresourcedefinitions | grep snapshot --quiet
if [ $? -ne 0 ]
then
    echo "installing snapshot CRD"; kubectl create -f snapshot-crd.yaml
fi

lifecyclePresent=$(kubectl get daemonset unity-node -n unity -o yaml | grep -c lifecycle)
echo "lifecycle present :${lifecyclePresent}"
if [ $lifecyclePresent -gt 0 ]; then
    echo "Removing lifecycle hooks from daemonset"
    kubectl patch daemonset unity-node -n unity --type json -p='[{"op": "replace", "path": "/spec/updateStrategy", "type":"OnDelete"}]'
    kubectl patch daemonset unity-node -n unity --type json -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/lifecycle"}]'
    kubectl patch daemonset unity-node -n unity --type json -p='[{"op": "remove", "path": "/spec/template/spec/containers/1/lifecycle"}]'
    sleep 5
    kubectl delete pod -l app=unity-node -n unity --force --grace-period=0
    waitOnRunning
fi

helm version | grep "v3." --quiet
if [ $? -eq 0 ]
then
    echo "Upgrading using helm version 3"
    helm upgrade --values myvalues.yaml --values csi-unity/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --namespace "$NS" unity ./csi-unity
else
    echo "Upgrading using helm version 2"
    kubectl delete csidriver unity
    helm upgrade --values myvalues.yaml --values csi-unity/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml unity --namespace unity ./csi-unity
fi

waitOnRunning

echo "CSIDrivers:"
kubectl get csidrivers
echo "CSINodes:"
kubectl get csinode
echo "StorageClasses:"
kubectl get storageclass
