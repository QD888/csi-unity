#!/bin/bash
NS="unity"

# Use relative path of script invocation
cd "`dirname \"$0\"`"

source ./common.bash

# Only k8s 1.14 and k8s 1.16 are supported
if ! [ ${kMajorVersion} -eq 1 -a \( ${kMinorVersion} -eq 14 -o ${kMinorVersion} -eq 16 \) ]
then
    echo "Only Kubernetes 1.14 and 1.16 versions are supported"
    exit 0
fi

# Verify the kubernetes installation has the feature gates needed.
sh ./verify.kubernetes
rc=$?
if [ $rc -ne 0 ]
then
     echo "*******************************************************************************"
     echo "Warning: Kubernetes --feature-gates not correctly configured... it may not work"
     echo "*******************************************************************************"
     sleep 5
fi

# Check if unity-certs-0 exists. If not, then create it
kubectl get secrets -n "$NS" | grep unity-certs-0 --quiet
if [ $? -ne 0 ];
    then echo "*** Couldn't find unity-certs. Creating an empty secret. Delete it and re-create it if you want to validate unisphere certificates ***"
    kubectl create -f ./emptysecret.yaml
fi

kubectl get customresourcedefinitions | grep snapshot --quiet
if [ $? -ne 0 ]
then
    echo "installing snapshot CRD"; kubectl create -f snapshot-crd.yaml
fi

helm version | grep "v3." --quiet
if [ $? -eq 0 ]
then
    echo "Installing using helm version 3"
    helm install unity --values myvalues.yaml --values csi-unity/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml -n "$NS" ./csi-unity
else
    echo "Installing using helm version 2"
    helm install --values myvalues.yaml --values csi-unity/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --name unity --namespace unity ./csi-unity
fi

waitOnRunning

echo "CSIDrivers:"
kubectl get csidrivers
echo "CSINodes:"
kubectl get csinode
echo "StorageClasses:"
kubectl get storageclass

